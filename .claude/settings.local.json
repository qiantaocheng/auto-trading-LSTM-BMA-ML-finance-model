{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(python:*)",
      "Bash(D:tradetrading_envScriptspip.exe install schedule)",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\pip.exe\" install schedule)",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"import schedule; print(''Schedule module imported successfully'')\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"import pandas, numpy, yfinance, schedule, scipy, statsmodels, sklearn; print(''All major modules imported successfully'')\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"\nimport logging\nimport sys\nfrom pathlib import Path\n\n# Setup logging similar to the trading manager\nlog_dir = Path(''logs'')\nlog_dir.mkdir(exist_ok=True)\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=''%(asctime)s - %(levelname)s - %(message)s'',\n    handlers=[\n        logging.FileHandler(log_dir / ''test_encoding.log'', encoding=''utf-8''),\n        logging.StreamHandler()\n    ]\n)\n\nlogger = logging.getLogger(''test'')\n\n# Test emoji logging\ntest_message = ''[BMA交易] ❌ BMA分析失败，取消自动交易''\nsafe_message = test_message.replace(''❌'', ''[FAIL]'').replace(''✅'', ''[OK]'').replace(''⚠️'', ''[WARN]'')\n\nlogger.info(safe_message)\nprint(''Logging test completed successfully'')\n\")",
      "Bash(rm:*)",
      "Bash(ls:*)",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"\nimport pandas as pd\n\n# 读取最新的BMA文件\nbma_file = ''D:/trade/result/bma_quantitative_analysis_20250806_030536_730_111.xlsx''\nprint(''=== BMA Excel 结构 ==='')\ntry:\n    excel_file = pd.ExcelFile(bma_file)\n    print(f''Sheet名称: {excel_file.sheet_names}'')\n    \n    for sheet in excel_file.sheet_names:\n        df = pd.read_excel(bma_file, sheet_name=sheet)\n        print(f''\\n--- {sheet} ---'')\n        print(f''行数: {len(df)}, 列数: {len(df.columns)}'')\n        print(f''列名: {list(df.columns)}'')\n        if len(df) > 0:\n            print(f''前几行数据:'')\n            print(df.head(2))\nexcept Exception as e:\n    print(f''读取BMA文件错误: {e}'')\n\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"\nimport pandas as pd\n\n# 读取最新的LSTM文件\nlstm_file = ''D:/trade/result/test_multi_day_lstm_analysis_20250806_020501_430_769.xlsx''\nprint(''=== LSTM Excel 结构 ==='')\ntry:\n    excel_file = pd.ExcelFile(lstm_file)\n    print(f''Sheet名称: {excel_file.sheet_names}'')\n    \n    for sheet in excel_file.sheet_names:\n        df = pd.read_excel(lstm_file, sheet_name=sheet)\n        print(f''\\n--- {sheet} ---'')\n        print(f''行数: {len(df)}, 列数: {len(df.columns)}'')\n        print(f''列名: {list(df.columns)}'')\n        if len(df) > 0:\n            print(f''前几行数据:'')\n            print(df.head(2))\nexcept Exception as e:\n    print(f''读取LSTM文件错误: {e}'')\n\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" test_lstm_save.py)",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" lstm_multi_day_enhanced.py --start-date 2024-01-01 --end-date 2025-08-06)",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"\nimport os\nimport sys\nprint(''=== 测试result文件夹权限 ==='')\nresult_dir = ''D:/trade/result''\nprint(f''result目录存在: {os.path.exists(result_dir)}'')\nprint(f''result目录可读: {os.access(result_dir, os.R_OK)}'')\nprint(f''result目录可写: {os.access(result_dir, os.W_OK)}'')\n\n# 测试创建临时文件\ntry:\n    test_file = os.path.join(result_dir, ''test_permission.tmp'')\n    with open(test_file, ''w'') as f:\n        f.write(''test'')\n    print(f''临时文件创建成功: {test_file}'')\n    os.remove(test_file)\n    print(''临时文件删除成功'')\nexcept Exception as e:\n    print(f''权限测试失败: {e}'')\n\n# 检查是否有文件被Excel占用\ntry:\n    import glob\n    locked_files = glob.glob(''D:/trade/result/~$*xlsx'')\n    if locked_files:\n        print(f''发现被占用的Excel文件: {locked_files}'')\n        for file in locked_files:\n            print(f''  - {file}'')\n    else:\n        print(''没有发现被占用的Excel文件'')\nexcept Exception as e:\n    print(f''检查锁定文件时出错: {e}'')\n\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"\nimport pandas as pd\nimport numpy as np\nimport os\nfrom datetime import datetime\n\nprint(''=== 测试Excel保存功能 ==='')\n\n# 模拟LSTM输出数据\ntest_data = {\n    ''ticker'': [''AAPL'', ''MSFT'', ''GOOGL''],\n    ''rating'': [''BUY'', ''STRONG_BUY'', ''HOLD''],\n    ''weighted_prediction'': [0.05, 0.08, 0.02],\n    ''confidence_score'': [0.8, 0.9, 0.6],\n    ''current_price'': [150.0, 300.0, 2500.0]\n}\n\ndf = pd.DataFrame(test_data)\nprint(''测试数据创建成功'')\nprint(df)\n\n# 测试保存Excel\ntimestamp = datetime.now().strftime(''%Y%m%d_%H%M%S'')\nrandom_suffix = np.random.randint(100, 999)\nrandom_suffix2 = np.random.randint(100, 999)\nexcel_filename = f''result/test_multi_day_lstm_analysis_{timestamp}_{random_suffix}_{random_suffix2}.xlsx''\n\nos.makedirs(''result'', exist_ok=True)\nprint(f''准备保存到: {excel_filename}'')\n\ntry:\n    with pd.ExcelWriter(excel_filename, engine=''openpyxl'') as writer:\n        print(''Excel Writer创建成功'')\n        df.to_excel(writer, sheet_name=''测试数据'', index=False)\n        print(''数据写入完成'')\n    \n    # 验证文件\n    if os.path.exists(excel_filename):\n        file_size = os.path.getsize(excel_filename)\n        print(f''✅ Excel文件保存成功: {excel_filename}'')\n        print(f''文件大小: {file_size} bytes'')\n    else:\n        print(''❌ 文件未创建'')\n        \nexcept Exception as e:\n    print(f''❌ Excel保存失败: {e}'')\n    print(f''错误类型: {type(e).__name__}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"\nimport pandas as pd\nimport numpy as np\nimport os\nfrom datetime import datetime\n\nprint(''=== Excel保存功能测试 ==='')\n\n# 测试数据\ntest_data = {\n    ''ticker'': [''AAPL'', ''MSFT'', ''GOOGL''],\n    ''rating'': [''BUY'', ''STRONG_BUY'', ''HOLD''],\n    ''weighted_prediction'': [0.05, 0.08, 0.02],\n    ''confidence_score'': [0.8, 0.9, 0.6],\n    ''current_price'': [150.0, 300.0, 2500.0]\n}\n\ndf = pd.DataFrame(test_data)\nprint(''测试数据创建完成'')\n\n# 测试Excel保存\ntimestamp = datetime.now().strftime(''%Y%m%d_%H%M%S'')\nrandom_suffix = np.random.randint(100, 999)\nrandom_suffix2 = np.random.randint(100, 999)\nexcel_filename = f''result/test_multi_day_lstm_analysis_{timestamp}_{random_suffix}_{random_suffix2}.xlsx''\n\nos.makedirs(''result'', exist_ok=True)\nprint(f''目标文件: {excel_filename}'')\n\ntry:\n    with pd.ExcelWriter(excel_filename, engine=''openpyxl'') as writer:\n        print(''Excel Writer创建成功'')\n        df.to_excel(writer, sheet_name=''测试数据'', index=False)\n        print(''数据写入sheet完成'')\n    \n    # 验证文件\n    if os.path.exists(excel_filename):\n        file_size = os.path.getsize(excel_filename)\n        print(f''SUCCESS: Excel文件已保存: {excel_filename}'')\n        print(f''文件大小: {file_size} bytes'')\n        \n        # 测试读取\n        test_read = pd.read_excel(excel_filename, sheet_name=''测试数据'')\n        print(f''读取验证成功，行数: {len(test_read)}'')\n    else:\n        print(''ERROR: 文件未成功创建'')\n        \nexcept Exception as e:\n    print(f''ERROR: Excel保存失败: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\" -c \"\nimport os\nimport glob\nfrom datetime import datetime\n\nprint(''=== 检查最近的LSTM运行日志 ==='')\n\n# 检查日志文件\nlog_files = glob.glob(''D:/trade/logs/*lstm*.log'')\nif log_files:\n    latest_log = max(log_files, key=os.path.getmtime)\n    print(f''最新LSTM日志: {latest_log}'')\n    \n    # 读取最后50行\n    try:\n        with open(latest_log, ''r'', encoding=''utf-8'') as f:\n            lines = f.readlines()\n            print(''日志最后50行:'')\n            for line in lines[-50:]:\n                print(line.strip())\n    except Exception as e:\n        print(f''读取日志出错: {e}'')\nelse:\n    print(''未找到LSTM日志文件'')\n\n# 检查最近的Excel文件\nprint('''')\nprint(''=== 检查最近生成的LSTM Excel文件 ==='')\nlstm_excels = glob.glob(''D:/trade/result/*lstm*.xlsx'')\nif lstm_excels:\n    latest_excel = max(lstm_excels, key=os.path.getmtime)\n    print(f''最新LSTM Excel: {latest_excel}'')\n    \n    # 检查文件信息\n    stat = os.stat(latest_excel)\n    print(f''文件大小: {stat.st_size} bytes'')\n    print(f''修改时间: {datetime.fromtimestamp(stat.st_mtime)}'')\nelse:\n    print(''未找到LSTM Excel文件'')\n\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\python.exe\":*)",
      "Bash(touch:*)",
      "Bash(cat:*)",
      "Bash(\"D:\\trade\\快速启动.bat\")",
      "Bash(\"D:\\trade\\trading_env\\Scripts\\pip.exe\" install ib_insync)"
    ],
    "deny": []
  }
}